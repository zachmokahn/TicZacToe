// Generated by CoffeeScript 1.6.2
(function() {
  var Computer,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Computer = (function() {
    function Computer(board) {
      this.board = board;
    }

    Computer.prototype.readSpaces = function() {
      return this.board.spaces;
    };

    Computer.prototype.findBestMove = function() {
      if (this.checkForComputerWin()) {
        return this.bestMove;
      }
      if (this.checkForBlockPlayerWin()) {
        return this.bestMove;
      }
      if (this.checkForComputerDoubleThreat()) {
        return this.bestMove;
      }
      if (this.checkForPlayerDoubleThreat()) {
        return this.bestMove;
      }
      if (this.checkMiddleAvailability()) {
        return this.bestMove;
      }
      if (this.checkPlayerOppositeCorner()) {
        return this.bestMove;
      }
      if (this.getAnyCorner()) {
        return this.bestMove;
      }
      if (this.getAnyWall()) {
        return this.bestMove;
      }
    };

    Computer.prototype.checkForComputerWin = function() {
      return this.checkForPossibleWin(this.board.secondPlayerToken);
    };

    Computer.prototype.checkForBlockPlayerWin = function() {
      return this.checkForPossibleWin(this.board.firstPlayerToken);
    };

    Computer.prototype.checkForComputerDoubleThreat = function() {
      if (this.checkCornerDoubleThreat(this.board.secondPlayerToken)) {
        return this.getCornerDoubleThreat();
      }
      if (this.checkWallDoubleThreat(this.board.secondPlayerToken)) {
        return true;
      }
      return false;
    };

    Computer.prototype.checkForPlayerDoubleThreat = function() {
      if (this.checkCornerDoubleThreat(this.board.firstPlayerToken)) {
        return true;
      }
      if (this.checkWallDoubleThreat(this.board.firstPlayerToken)) {
        return true;
      }
      return false;
    };

    Computer.prototype.checkMiddleAvailability = function() {
      return this.getEmpty([4]);
    };

    Computer.prototype.checkPlayerOppositeCorner = function() {
      return this.checkOppositeCorner(this.board.firstPlayerToken);
    };

    Computer.prototype.getAnyCorner = function() {
      return this.getEmpty(this.board.cornerSpots);
    };

    Computer.prototype.getAnyWall = function() {
      return this.getEmpty(this.board.wallSpots);
    };

    Computer.prototype.getEmpty = function(spaces) {
      var availableSpaces;

      availableSpaces = this.board.getSpaces(spaces, this.board.emptyToken);
      if (availableSpaces.length > 0) {
        this.getBestMove(availableSpaces);
        return true;
      }
      return false;
    };

    Computer.prototype.getCornerDoubleThreat = function() {
      var edge, _i, _len, _ref;

      _ref = [[1, 0, 3], [5, 8, 7], [1, 2, 5], [3, 6, 7]];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        if (this.checkSpots(edge, this.board.emptyToken)) {
          console.log(edge);
          console.log(edge[1]);
          this.getBestMove([edge[1]]);
          return true;
        }
      }
      return false;
    };

    Computer.prototype.checkOppositeCorner = function(token) {
      var filledSpaces;

      filledSpaces = this.board.getSpaces(this.board.cornerSpots, token);
      return this.checkIfOppositeAvailable(filledSpaces);
    };

    Computer.prototype.checkIfOppositeAvailable = function(spaces) {
      var emptySpaces, oppositeSpaces, space;

      oppositeSpaces = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = spaces.length; _i < _len; _i++) {
          space = spaces[_i];
          _results.push(this.board.oppositeSpots[space]);
        }
        return _results;
      }).call(this);
      emptySpaces = this.board.getSpaces(oppositeSpaces, this.board.emptyToken);
      if (emptySpaces.length > 0) {
        this.getBestMove(emptySpaces);
        return true;
      }
      return false;
    };

    Computer.prototype.checkWallDoubleThreat = function(token) {
      if (this.wallDoubleThreatPossible(token)) {
        return true;
      }
      return false;
    };

    Computer.prototype.wallDoubleThreatPossible = function(token) {
      var combos, wallCombos, _i, _len;

      wallCombos = [[this.board.rows[0], this.board.columns[0]], [this.board.rows[0], this.board.columns[2]], [this.board.rows[2], this.board.columns[0]], [this.board.rows[2], this.board.columns[2]]];
      for (_i = 0, _len = wallCombos.length; _i < _len; _i++) {
        combos = wallCombos[_i];
        if (this.occupyBothWalls(combos, token)) {
          return true;
        }
      }
    };

    Computer.prototype.occupyBothWalls = function(combos, token) {
      if (this.occupyWall(combos[0], token) && this.occupyWall(combos[1], token)) {
        this.getBestMove(this.intersection(combos[0], combos[1]));
        return true;
      }
      return false;
    };

    Computer.prototype.intersection = function(a, b) {
      var value, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        value = a[_i];
        if (__indexOf.call(b, value) >= 0) {
          _results.push(value);
        }
      }
      return _results;
    };

    Computer.prototype.occupyWall = function(combo, token) {
      return this.board.checkSpot(combo[1], token) && this.board.getSpaces(combo, this.board.emptyToken).length === 2;
    };

    Computer.prototype.checkCornerDoubleThreat = function(token) {
      if (this.cornerDoubleThreatPossible(token)) {
        this.getBestMove(this.board.wallSpots);
        return true;
      }
      return false;
    };

    Computer.prototype.cornerDoubleThreatPossible = function(token) {
      if (this.firstCornersOccupied(token) && this.firstEdgesEmpty()) {
        return true;
      }
      if (this.secondCornerOccupied(token) && this.secondEdgesEmpty()) {
        return true;
      }
      return false;
    };

    Computer.prototype.firstCornersOccupied = function(token) {
      return this.checkSpots([0, 8], token);
    };

    Computer.prototype.secondCornerOccupied = function(token) {
      return this.checkSpots([2, 6], token);
    };

    Computer.prototype.firstEdgesEmpty = function() {
      return this.checkEdgesEmpty([[1, 2, 5], [3, 6, 7]]);
    };

    Computer.prototype.secondEdgesEmpty = function() {
      return this.checkEdgesEmpty([[0, 1, 3], [5, 7, 8]]);
    };

    Computer.prototype.checkEdgesEmpty = function(edges) {
      var edge, _i, _len;

      for (_i = 0, _len = edges.length; _i < _len; _i++) {
        edge = edges[_i];
        if (this.checkSpots(edge, this.board.emptyToken)) {
          return true;
        }
      }
      return false;
    };

    Computer.prototype.checkSpots = function(locations, token) {
      var spot, _i, _len;

      for (_i = 0, _len = locations.length; _i < _len; _i++) {
        spot = locations[_i];
        if (!this.board.checkSpot(spot, token)) {
          return false;
        }
      }
      return true;
    };

    Computer.prototype.checkForPossibleWin = function(token) {
      var combo, winCombos, _i, _j, _len, _len1, _ref;

      _ref = [this.board.rows, this.board.columns, this.board.diagonals];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        winCombos = _ref[_i];
        for (_j = 0, _len1 = winCombos.length; _j < _len1; _j++) {
          combo = winCombos[_j];
          if (this.winIsPossible(combo, token)) {
            return true;
          }
        }
      }
      return false;
    };

    Computer.prototype.winIsPossible = function(combo, token) {
      if (this.twoInARow(combo, token) && this.isWinnable(combo)) {
        this.getBestMove(combo);
        return true;
      }
      return false;
    };

    Computer.prototype.getBestMove = function(combo) {
      return this.bestMove = this.board.getSpaces(combo, this.board.emptyToken)[0];
    };

    Computer.prototype.twoInARow = function(combo, token) {
      return this.board.getSpaces(combo, token).length === 2;
    };

    Computer.prototype.isWinnable = function(combo) {
      return this.board.getSpaces(combo, this.board.emptyToken).length === 1;
    };

    return Computer;

  })();

  window.Computer = Computer;

}).call(this);
