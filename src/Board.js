// Generated by CoffeeScript 1.6.2
(function() {
  var Board;

  Board = (function() {
    function Board(firstPlayerToken, secondPlayerToken) {
      this.firstPlayerToken = firstPlayerToken;
      this.secondPlayerToken = secondPlayerToken;
      this.emptyToken = " ";
      this.spaces = [" ", " ", " ", " ", " ", " ", " ", " ", " "];
      this.cornerSpots = [0, 2, 6, 8];
      this.wallSpots = [1, 3, 5, 7];
      this.oppositeSpots = [8, 7, 6, 5, 4, 3, 2, 1, 0];
      this.rows = [[0, 1, 2], [3, 4, 5], [6, 7, 8]];
      this.columns = [[0, 3, 6], [1, 4, 7], [2, 5, 8]];
      this.diagonals = [[0, 4, 8], [2, 4, 6]];
    }

    Board.prototype.checkSpot = function(location, symbol) {
      return this.spaces[location] === symbol;
    };

    Board.prototype.getSpaces = function(locations, symbol) {
      var spot, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = locations.length; _i < _len; _i++) {
        spot = locations[_i];
        if (this.checkSpot(spot, symbol)) {
          _results.push(spot);
        }
      }
      return _results;
    };

    Board.prototype.firstPlayerMove = function(location) {
      return this.playMove(location, this.firstPlayerToken);
    };

    Board.prototype.secondPlayerMove = function(location) {
      return this.playMove(location, this.secondPlayerToken);
    };

    Board.prototype.playMove = function(location, token) {
      if (this.validMove(location)) {
        this.spaces[location] = token;
        return true;
      } else {
        return false;
      }
    };

    Board.prototype.validMove = function(location) {
      return this.checkSpot(location, this.emptyToken);
    };

    Board.prototype.checkForWinner = function() {
      var player, _i, _len, _ref;

      _ref = [this.firstPlayerToken, this.secondPlayerToken];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (this.checkForWin(player)) {
          return player;
        }
      }
      return false;
    };

    Board.prototype.checkForWin = function(symbol) {
      var combos, _i, _len, _ref;

      _ref = [this.rows, this.columns, this.diagonals];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        combos = _ref[_i];
        if (this.hasWinningCombo(combos, symbol) === true) {
          return true;
        }
      }
      return false;
    };

    Board.prototype.hasWinningCombo = function(combos, symbol) {
      var combo, _i, _len;

      for (_i = 0, _len = combos.length; _i < _len; _i++) {
        combo = combos[_i];
        if (this.getSpaces(combo, symbol).length === 3) {
          return true;
        }
      }
      return false;
    };

    Board.prototype.checkForDraw = function() {
      if (this.noPlayableMoves() && this.noWinner()) {
        return true;
      }
      return false;
    };

    Board.prototype.noPlayableMoves = function() {
      return this.getSpaces(this.oppositeSpots, this.emptyToken).length === 0;
    };

    Board.prototype.noWinner = function() {
      return this.checkForWinner() === false;
    };

    return Board;

  })();

  window.Board = Board;

}).call(this);
