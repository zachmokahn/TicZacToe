// Generated by CoffeeScript 1.6.2
(function() {
  describe("AI", function() {
    describe("algorithm flow", function() {
      var ai;

      ai = void 0;
      beforeEach(function() {
        ai = new Computer;
        spyOn(ai, 'winningLocation').andReturn(false);
        spyOn(ai, 'blockLocation').andReturn(false);
        spyOn(ai, 'blockDoubleThreatLocation').andReturn(false);
        spyOn(ai, 'playCenterLocation').andReturn(false);
        spyOn(ai, 'playOppositeCornerLocation').andReturn(false);
        spyOn(ai, 'playAnyCornerLocation').andReturn(false);
        return spyOn(ai, 'playWallLocation').andReturn(false);
      });
      it("plays the winning move if it can win", function() {
        ai.winningLocation.andReturn(true);
        ai.gameLogic();
        return expect(ai.winningLocation).toHaveBeenCalled();
      });
      it("blocks the player if a winning move cannot be played", function() {
        ai.blockLocation.andReturn(true);
        ai.gameLogic();
        return expect(ai.blockLocation).toHaveBeenCalled();
      });
      it("blocks a double threat opportunity if the computer cannot create a double threat", function() {
        ai.blockDoubleThreatLocation.andReturn(true);
        ai.gameLogic();
        return expect(ai.blockDoubleThreatLocation).toHaveBeenCalled();
      });
      it("plays the center space if there is no threat of double threat", function() {
        ai.playCenterLocation.andReturn(true);
        ai.gameLogic();
        return expect(ai.playCenterLocation).toHaveBeenCalled();
      });
      it("plays the opposite corner from the player if the center is taken", function() {
        ai.playOppositeCornerLocation.andReturn(true);
        ai.gameLogic();
        return expect(ai.playOppositeCornerLocation).toHaveBeenCalled();
      });
      it("plays any corner if the player has not take a corner", function() {
        ai.playAnyCornerLocation.andReturn(true);
        ai.gameLogic();
        return expect(ai.playAnyCornerLocation).toHaveBeenCalled();
      });
      return it("plays a wall spot if no corners are available", function() {
        ai.gameLogic();
        return expect(ai.playWallLocation).toHaveBeenCalled();
      });
    });
    return describe("Computer Logic", function() {
      var game;

      game = void 0;
      beforeEach(function() {
        return game = new Game(new Player("test"));
      });
      it("should take the winning move if present", function() {
        game.board[0] = "X";
        game.board[1] = "O";
        game.board[2] = "X";
        game.board[4] = "O";
        game.board[3] = "X";
        return expect(game.computerLogic()).toEqual(7);
      });
      it("should take the blocking move if present and can't win", function() {
        game.board[0] = "X";
        game.board[4] = "O";
        game.board[3] = "X";
        return expect(game.computerLogic()).toEqual(6);
      });
      it("should take a wall if double threat present", function() {
        game.board[0] = "X";
        game.board[4] = "O";
        game.board[8] = "X";
        return expect(game.computerLogic()).toEqual(1);
      });
      it("should take the center if not taken on first move", function() {
        game.playerMove(1);
        return expect(game.computerLogic()).toEqual(4);
      });
      it("should take an opposite corner if no center is availabe", function() {
        game.board[0] = "X";
        game.board[4] = "O";
        game.board[5] = "X";
        return expect(game.computerLogic()).toEqual(8);
      });
      it("should play any corner", function() {
        game.board[3] = "X";
        game.board[4] = "O";
        game.board[5] = "X";
        return expect(game.computerLogic()).toEqual(0);
      });
      return it("should play any wall if it can't play any corner", function() {
        game.board[4] = "X";
        game.board[0] = "O";
        game.board[8] = "X";
        game.board[6] = "O";
        game.board[2] = "X";
        game.board[5] = "O";
        game.board[3] = "X";
        return expect(game.computerLogic()).toEqual(1);
      });
    });
  });

}).call(this);
