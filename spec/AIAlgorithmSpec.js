// Generated by CoffeeScript 1.6.2
(function() {
  describe("AI algorithm", function() {
    var ai;

    ai = void 0;
    beforeEach(function() {
      ai = new Computer;
      spyOn(ai, 'canWin').andReturn(false);
      spyOn(ai, 'canBlock').andReturn(false);
      spyOn(ai, 'canDoubleThreat').andReturn(false);
      spyOn(ai, 'canBlockDoubleThreat').andReturn(false);
      spyOn(ai, 'canPlayCenter').andReturn(false);
      spyOn(ai, 'canPlayOppositeCorner').andReturn(false);
      spyOn(ai, 'willPlayAnyCorner').andReturn(false);
      spyOn(ai, 'willPlayWall').andReturn(true);
      return spyOn(ai, 'playWallLocation');
    });
    it("plays the winning move if it can win", function() {
      ai.canWin.andReturn(true);
      spyOn(ai, 'winningLocation');
      ai.gameLogic();
      return expect(ai.winningLocation).toHaveBeenCalled();
    });
    it("blocks the player if a winning move cannot be played", function() {
      ai.canBlock.andReturn(true);
      spyOn(ai, 'blockLocation');
      ai.gameLogic();
      return expect(ai.blockLocation).toHaveBeenCalled();
    });
    it("creates a double threat if the player has nothing to be blocked", function() {
      ai.canDoubleThreat.andReturn(true);
      spyOn(ai, 'doubleThreatLocation');
      ai.gameLogic();
      return expect(ai.doubleThreatLocation).toHaveBeenCalled();
    });
    it("blocks a double threat opportunity if the computer cannot create a double threat", function() {
      ai.canBlockDoubleThreat.andReturn(true);
      spyOn(ai, 'blockDoubleThreatLocation');
      ai.gameLogic();
      return expect(ai.blockDoubleThreatLocation).toHaveBeenCalled();
    });
    it("plays the center space if there is no threat of double threat", function() {
      ai.canPlayCenter.andReturn(true);
      spyOn(ai, 'playCenterLocation');
      ai.gameLogic();
      return expect(ai.playCenterLocation).toHaveBeenCalled();
    });
    it("plays the opposite corner from the player if the center is taken", function() {
      ai.canPlayOppositeCorner.andReturn(true);
      spyOn(ai, 'playOppositeCornerLocation');
      ai.gameLogic();
      return expect(ai.playOppositeCornerLocation).toHaveBeenCalled();
    });
    it("plays any corner if the player has not take a corner", function() {
      ai.willPlayAnyCorner.andReturn(true);
      spyOn(ai, 'playAnyCornerLocation');
      ai.gameLogic();
      return expect(ai.playAnyCornerLocation).toHaveBeenCalled();
    });
    return it("plays a wall spot if no corners are available", function() {
      ai.gameLogic();
      return expect(ai.playWallLocation).toHaveBeenCalled();
    });
  });

}).call(this);
