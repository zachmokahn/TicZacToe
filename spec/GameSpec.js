// Generated by CoffeeScript 1.6.2
(function() {
  describe("Game", function() {
    var board, firstPlayer, game, secondPlayer;

    firstPlayer = secondPlayer = board = game = void 0;
    beforeEach(function() {
      firstPlayer = new Player("firstPlayer");
      secondPlayer = new Player("secondPlayer");
      board = new Board("X", "O");
      return game = new Game(firstPlayer, secondPlayer, board);
    });
    describe("Rules for a New Game", function() {
      it("board should be blank when game starts", function() {
        var position, _i, _len, _ref, _results;

        _ref = game.board.spaces;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          position = _ref[_i];
          _results.push(expect(position === " ").toBeTruthy());
        }
        return _results;
      });
      it("should default First Turn to firstPlayer", function() {
        return expect(game.turn).toEqual(firstPlayer);
      });
      return it("should allow secondPlayer to start first", function() {
        var newGame;

        newGame = new Game(firstPlayer, secondPlayer, board, secondPlayer);
        return expect(newGame.turn).toEqual(secondPlayer);
      });
    });
    describe("Filling in Propper Token", function() {
      beforeEach(function() {
        game.playerMove(1);
        return game.playerMove(2);
      });
      it("position should change to 'x' when first player selects a board location", function() {
        return expect(board.spaces[1]).toEqual("X");
      });
      return it("position should change to 'o' when second player selects a board location", function() {
        return expect(board.spaces[2]).toEqual("O");
      });
    });
    describe("Rules for alternating turns", function() {
      it("turn should change to the secondPlayer after the firstPlayer plays", function() {
        game.turn = firstPlayer;
        game.playerMove(1);
        return expect(game.turn).toEqual(secondPlayer);
      });
      it("turn should change to the firstPlayer after the secondPlayer plays", function() {
        game.turn = secondPlayer;
        game.playerMove(1);
        return expect(game.turn).toEqual(firstPlayer);
      });
      return it("turn should not change turn if an illegal move is played", function() {
        game.turn = firstPlayer;
        board.spaces[1] = "X";
        game.playerMove(1);
        expect(game.turn).toEqual(firstPlayer);
        game.turn = secondPlayer;
        game.playerMove(1);
        return expect(game.turn).toEqual(secondPlayer);
      });
    });
    return describe("Rules for game is over", function() {
      it("gameOver is false when the game starts", function() {
        return expect(game.gameOver).toEqual(false);
      });
      it("gameOver is true if game is a draw and 'Nobody' is the winner", function() {
        spyOn(board, 'checkForDraw').andReturn(true);
        game.checkGameOver();
        expect(game.gameOver).toEqual(true);
        return expect(game.winner).toEqual('Nobody');
      });
      return it("gameOver is true when a player has won and 'X' or 'O' is the winner", function() {
        spyOn(board, 'checkForWin').andReturn(true);
        game.checkGameOver();
        expect(game.gameOver).toEqual(true);
        return expect(game.winner).toEqual('X');
      });
    });
  });

}).call(this);
